#!/usr/bin/env python3
from pathlib import Path
from tempfile import TemporaryDirectory
import typer, subprocess, os, dotenv, shutil

def copytree(src, dst, symlinks=False, ignore=None):
    if not os.path.isdir(src): 
        return shutil.copy2(src, dst)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s): shutil.copytree(s, d, symlinks, ignore)
        else: shutil.copy2(s, d)

def main(
    target: Path = typer.Argument(..., exists=True, help='path to cached files'), 
    output: Path = typer.Option(Path('./tchecker.out'), help='path for outputs.'), 
    verbose: bool = typer.Option(False, help="output more verbose information. ")
) -> None: 
    vprint = lambda msg, indent=0: print('\n'.join('  ' * indent+m for m in msg.splitlines())) if verbose else None
    vprint(f"⚠️ Start TChecker for php file{'s under ' if target.is_dir() else ' '} '{target}'")
    wrapper_dir = os.path.dirname(os.path.abspath(__file__))
    if not dotenv.load_dotenv(f"{wrapper_dir}/wrapper.env"): 
        raise FileNotFoundError(f"{wrapper_dir}/wrapper.env")
    tchecker_path: str = os.path.dirname(wrapper_dir)
    joern_path: str = os.path.join(os.getenv('PHPJOERN_HOME'), 'php2ast')
    csfix_path: str = os.path.join(os.getenv('CS_FIXER_HOME'), 'php-cs-fixer')
    ast2cpg_path: str = os.path.join(tchecker_path, "phpast2cpg")
    with TemporaryDirectory(prefix="tchecker_") as tmp_dir: 
        tmp_path = str(Path(tmp_dir).absolute())
        copytree(target, tmp_path, symlinks=True)
        csfix_out = subprocess.check_output(
            [csfix_path, 'fix', tmp_path, "--using-cache", "no"], 
            stderr=subprocess.STDOUT, cwd = tchecker_path
        )
        vprint('✔️ PHP-CS-FIX Output: ', 1); vprint(csfix_out.decode(), 2)
        joern_out = subprocess.check_output(
            [str(joern_path), tmp_path], 
            stderr=subprocess.STDOUT, cwd = tchecker_path
        )
        vprint('✔️ PHP-JOERN Output: ', 1); vprint(joern_out.decode(), 2)
        try: 
            tchecker_out = subprocess.check_output(
                [str(ast2cpg_path), tmp_path], stderr=subprocess.STDOUT, 
                shell=False, cwd = tchecker_path
            )
        except subprocess.CalledProcessError as e: 
            print(e.output)
            raise e
        vprint('✔️ TChecker Output:', 1); vprint(tchecker_out.decode(), 2)
        output.mkdir(parents=True, exist_ok=True)
        for each_fname in ['call_graph.csv', 'cpg_edges.csv', 'nodes.csv', 'rels.csv']: 
            expected_path = os.path.join(tchecker_path, each_fname)
            output_path = os.path.join(output, each_fname)
            shutil.move(expected_path, output_path)
        with open(os.path.join(output, 'result.txt'), '+w') as result: 
            result.write(tchecker_out.decode())
    vprint(f"⚠️ Outputs have already been generated under '{output}'")
    return None

if __name__ == "__main__": 
    app = typer.Typer(add_completion=False)
    app.command()(main)
    app()
